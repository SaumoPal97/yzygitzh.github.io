---
layout: post
title:  "GSoC 2017 Progress"
date:   2017-06-01 16:34:00 +0800
categories: computer_science gsoc android
---
Last update: 2017-06-03

My project for GSoC 2017 is [Android Sandbox Detection and Countermeasure][gsoc-project]. This post records my progress during the GSoC 2017 period. Related repositories include:
* [DroidBot][droidbot]: A lightweight test input generator for Android
* [anti-emulator][anti-emulator]: Detecting an emulated Android environment
* [DenDroid][dendroid]: An Android Trojan equipped with anti-sandbox techniques
* [ReDroid][redroid]: Trace comparing and control flow fixing

# Community Bonding Period

1. Modify AOSP (branch `android_6.0.1-r77`) to expand trace buffer to 64MB. [DONE]
2. Port strazzere's `anti-emulator` app to Android Marshmallow. [DONE]
3. Get `DenDroid`, a real-world malware with anti-sandbox behavior ready for testing. [DONE]
4. Modify DroidBot to support re-producible event sequences for trace comparing. [PR][droidbot-reproducible] [DONE]
5. Have a look into [Mining Sandbox][mining-sandbox] and [FuzzDroid][fuzzdroid] papers. [DONE]

# Phase 1

Phase 1 mainly contains testing anti-sandbox samples and comparing their traces.

* May 30th - June 5th
    1. Write a testing script for automatically collect running traces on both real devices and emulators. [DONE]
    2. Test [anti-emulator][anti-emulator] and [DenDroid][dendroid] samples with the testing script. [DONE]
    3. Design the trace comparing algorithm and implement the first version of it.
    4. Run the trace comparing algorithm on the traces collected on the samples.
* June 6th - June 12th
    1. Improve the [anti-emulator][anti-emulator] sample with timing attacks and some other techniques.
    2. Test the two sample apps on DroidBox, TaintDroid and VirusTotal and see if they can detect the frameworks.
    3. Improve the trace comparing algorithm according to the test results.
* June 12th - June 18th
    1. Write a testing report for the two samples.
    2. Scale the testing app samples to a more expanded data set.
    3. Improve the trace comparing algorithm according to the expanded test results.
* June 18th - June 24th
    1. Evaluate the scaled testing results.
    2. Summarize the testing reports for scaled data set as a report for phase 1 evaluation.
    2. Investigate techniques for repairing the control flow of Android apps.
* June 25th - June 27th
    1. Flexible time.

# Phase 2

Phase 2 mainly contains implementing anti-sandbox detector and control flow fixer.

# Phase 3

Phase 3 mainly contains implementing control flow fixer, applying various improvements and working on documents.

[gsoc-project]: https://summerofcode.withgoogle.com/projects/#4820206829436928
[droidbot]: https://github.com/honeynet/droidbot
[anti-emulator]: https://github.com/yzygitzh/anti-emulator
[dendroid]: https://github.com/yzygitzh/dendroid_apk
[redroid]: https://github.com/yzygitzh/ReDroid
[droidbot-reproducible]: https://github.com/honeynet/droidbot/pull/40
[mining-sandbox]: https://www.boxmate.org/files/boxmate-camera-ready.pdf
[fuzzdroid]: http://mp.binaervarianz.de/icse2017-fuzzdroid.pdf