---
layout: post
title:  "GSoC 2017 Progress"
date:   2017-06-01 16:34:00 +0800
categories: computer_science gsoc android
---
Last update: 2017-07-12

My project for GSoC 2017 is [Android Sandbox Detection and Countermeasure][gsoc-project]. This post records my progress during the GSoC 2017 period. Related repositories include:
* [DroidBot][droidbot]: A lightweight test input generator for Android
* [anti-emulator][anti-emulator]: Detecting an emulated Android environment
* [DenDroid][dendroid]: An Android Trojan equipped with anti-sandbox techniques
* [ReDroid][redroid]: Trace comparing and control flow fixing

# Community Bonding Period

1. Modify AOSP (branch `android_6.0.1-r77`) to expand trace buffer to 64MB. [DONE]
2. Port strazzere's `anti-emulator` app to Android Marshmallow. [DONE]
3. Get `DenDroid`, a real-world malware with anti-sandbox behavior ready for testing. [DONE]
4. Modify DroidBot to support re-producible event sequences for trace comparing. [PR][droidbot-reproducible] [DONE]
5. Have a look into [Mining Sandbox][mining-sandbox] and [FuzzDroid][fuzzdroid] papers. [DONE]

# Phase 1

Phase 1 mainly contains testing anti-sandbox samples and comparing their traces.

* May 30th - June 5th
    1. Write a testing script for automatically collect running traces on both real devices and emulators. [DONE]
    2. Test [anti-emulator][anti-emulator] and [DenDroid][dendroid] samples with the testing script. [DONE]
    3. Design the trace comparing algorithm and implement the first version of it [DONE].
    4. Run the trace comparing algorithm on the traces collected on the samples [DONE].
* June 6th - June 12th
    1. Improve the [anti-emulator][anti-emulator] sample with timing attacks and some other techniques. [DONE]
        * Using OpenGL ES 2.0 API for graphic performance timing attack. Emulators usually have larger gap between lowest and highest FPS.
    2. Test the two sample apps on DroidBox, TaintDroid and VirusTotal and see if they can detect the frameworks. [PENDING]
    3. Improve the trace comparing algorithm according to the test results. [DONE]
        * Using bipartite matching and for thread mapping.
        * Using thread name and traces' max common prefix length for similarity between threads.
* June 12th - June 18th
    1. Write a testing report for the two samples. [PENDING]
    2. Scale the testing app samples to a more expanded data set. [DONE]
    3. Improve the trace comparing algorithm according to the expanded test results. [DONE]
        * Using `android.jar` `rt.jar` and some other runtime framework jars for common package name filtering.
        * Using [LibRadar][libradar] for 3rd party library package name filtering.
* June 18th - June 24th
    1. Evaluate the scaled testing results. [DONE]
    2. Summarize the testing reports for scaled data set as a report for phase 1 evaluation. [PENDING]
    2. Investigate techniques for repairing the control flow of Android apps. [DONE]
* June 25th - June 27th
    1. Flexible time.

# Phase 2

Phase 2 mainly contains implementing anti-sandbox detector and control flow fixer.

* June 28th - July 9th
    1. Fix issues of anti-sandbox detector found in previous evaluation. [DONE]
    2. Add finder for the collection of possible APIs leading to control flow divergence. [DONE]
    3. Investigate JDWP protocol for control flow correction. [DONE]
* July 10th - July 16th
    1. Design & implement a prototype of control flow correction tool
        * Manually written rules
        * Based on JDWP protocol
        * (MAYBE) Cancel ANR timeout in android source
    2. Evaluate the control flow correction prototype on Anti-emulator sample
* July 17th - July 23th
    1. Implement return value collector prototype (for Boolean return valued methods)
    2. Make the control flow correction tool rule being generated automatically
    3. Evaluate the new automatic tool on Anti-emulator example
* July 24th\
    1. Flexible time.

# Phase 3

Phase 3 mainly contains implementing control flow fixer, applying various improvements and working on documents.

[gsoc-project]: https://summerofcode.withgoogle.com/projects/#4820206829436928
[droidbot]: https://github.com/honeynet/droidbot
[anti-emulator]: https://github.com/yzygitzh/anti-emulator
[dendroid]: https://github.com/yzygitzh/dendroid_apk
[redroid]: https://github.com/yzygitzh/ReDroid
[droidbot-reproducible]: https://github.com/honeynet/droidbot/pull/40
[mining-sandbox]: https://www.boxmate.org/files/boxmate-camera-ready.pdf
[fuzzdroid]: http://mp.binaervarianz.de/icse2017-fuzzdroid.pdf
[libradar]: https://github.com/pkumza/LibRadar
